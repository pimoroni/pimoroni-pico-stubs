from __future__ import annotations

from typing import overload

from pimoroni_i2c import PimoroniI2C

# https://github.com/pimoroni/pimoroni-pico/blob/main/common/pimoroni_common.hpp#L16
__PIN_UNUSED  = 0XFFFFFFFF


class BreakoutRTC:
    TCR_3K  = 0b00
    TCR_5K  = 0b01
    TCR_9K  = 0b10
    TCR_15K = 0b11

    def __init__(self, i2c: PimoroniI2C, interrupt=__PIN_UNUSED):
        ...

    def reset(self) -> None:
        ...

    def setup(self) -> None:
        ...

    def set_time(self, sec: int, min: int, hour: int, weekday: int, date: int, month: int, year: int) -> bool:
        ...

    def set_seconds(self, sec: int) -> bool:
        ...

    def set_minutes(self, min: int) -> bool:
        ...

    def set_hours(self, hour: int) -> bool:
        ...

    def set_weekday(self, weekday: int) -> bool:
        ...

    def set_date(self, date: int) -> bool:
        ...

    def set_month(self, month: int) -> bool:
        ...

    def set_year(self, year: int) -> bool:
        ...

    def set_to_compiler_time(self) -> bool:
        ...

    def update_time(self) -> bool:
        ...

    def string_date_usa(self) -> str:
        ...

    def string_date(self) -> str:
        ...

    def string_time(self) -> str:
        ...

    def string_time_stamp(self) -> str:
        ...

    def get_seconds(self) -> int:
        ...

    def get_minutes(self) -> int:
        ...

    def get_hours(self) -> int:
        ...

    def get_weekday(self) -> int:
        ...

    def get_date(self) -> int:
        ...

    def get_month(self) -> int:
        ...

    def get_year(self) -> int:
        ...

    def is_12_hour(self) -> bool:
        ...

    def is_pm(self) -> bool:
        ...

    def set_12_hour(self) -> None:
        ...

    def set_24_hour(self) -> None:
        ...

    def set_unix(self, value: int) -> bool:
        ...

    def get_unix(self) -> int:
        ...

    @overload
    def enable_alarm_interrupt(self) -> None:
        ...

    @overload
    def enable_alarm_interrupt(self, min: int, hour: int, date_or_weekday: int, set_weekday_alarm_not_date: bool, mode: int, enable_clock_output=False) -> None:
        ...

    def disable_alarm_interrupt(self) -> None:
        ...

    def read_alarm_interrupt_flag(self) -> bool:
        ...

    def clear_alarm_interrupt_flag(self) -> None:
        ...

    def set_timer(self, timer_repeat: bool, timer_frequency: int, timer_value: int, set_interrupt: bool, start_timer: bool, enable_clock_output=False) -> None:
        ...

    def get_timer_count(self) -> int:
        ...

    def enable_timer(self) -> None:
        ...

    def disable_timer(self) -> None:
        ...

    def enable_timer_interrupt(self) -> None:
        ...

    def disable_timer_interrupt(self) -> None:
        ...

    def read_timer_interrupt_flag(self) -> bool:
        ...

    def clear_timer_interrupt_flag(self) -> None:
        ...

    def enable_periodic_update_interrupt(self, every_second: bool, enable_clock_output=False) -> None:
        ...

    def disable_periodic_update_interrupt(self) -> None:
        ...

    def read_periodic_update_interrupt_flag(self) -> bool:
        ...

    def clear_periodic_update_interrupt_flag(self) -> None:
        ...

    def enable_trickle_charge(self, tcr=TCR_15K) -> None:
        ...

    def disable_trickle_charge(self) -> None:
        ...

    def set_backup_switchover_mode(self, val: int) -> None:
        ...

    def enable_clock_out(self, freq: int) -> None:
        ...

    def enable_interrupt_controlled_clockout(self, freq: int) -> None:
        ...

    def disable_clock_out(self) -> None:
        ...

    def read_clock_output_interrupt_flag(self) -> int:
        ...

    def clear_clock_output_interrupt_flag(self) -> None:
        ...

    def get_status(self) -> int:
        ...

    def clear_interrupts(self) -> None:
        ...
